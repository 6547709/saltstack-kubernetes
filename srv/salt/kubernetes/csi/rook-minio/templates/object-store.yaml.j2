{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import master with context -%}

apiVersion: v1
kind: Namespace
metadata:
  name: rook-minio
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-my-store-access-keys
  namespace: rook-minio
type: Opaque
data:
  # Base64 encoded string: "TEMP_DEMO_ACCESS_KEY"
  username: {{ master.storage.rook_minio.username | base64_encode }}
  # Base64 encoded string: "TEMP_DEMO_SECRET_KEY"
  password: {{ master.storage.rook_minio.password | base64_encode }}
---
apiVersion: minio.rook.io/v1alpha1
kind: ObjectStore
metadata:
  name: my-store
  namespace: rook-minio
spec:
  scope:
    nodeCount: 4
    # You can have multiple PersistentVolumeClaims in the volumeClaimTemplates list.
    # Be aware though that all PersistentVolumeClaim Templates will be used for each intance (see nodeCount).
    volumeClaimTemplates:
    - metadata:
        name: rook-minio-data1
      spec:
        accessModes: [ "ReadWriteOnce" ]
        # Set the storage class that will be used, otherwise Kubernetes' default storage class will be used.
        #storageClassName: "my-storage-class"
        resources:
          requests:
            storage: "8Gi"
    #- metadata:
    #    name: rook-minio-data2
    #  spec:
    #    accessModes: [ "ReadWriteOnce" ]
    #    # Uncomment and specify your StorageClass, otherwise
    #    # the cluster admin defined default StorageClass will be used.
    #    #storageClassName: "your-cluster-storageclass"
    #    resources:
    #      requests:
    #        storage: "8Gi"
  # A key value list of annotations
  annotations:
  #  key: value
  placement:
    tolerations:
    nodeAffinity:
      all:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: role
              operator: In
              values:
              - storage-node
    podAffinity:
    podAnyAffinity:
  credentials:
    name: minio-my-store-access-keys
    namespace: rook-minio
  clusterDomain:
---
apiVersion: v1
kind: Service
metadata:
  name: minio-my-store
  namespace: rook-minio
spec:
  type: NodePort
  ports:
    - port: 9000
  selector:
    app: minio