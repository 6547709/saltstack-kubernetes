{%- set public_domain = pillar['public-domain'] -%}
{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import master with context -%}
{%- from "kubernetes/map.jinja" import charts with context -%}

halyard:
  image:
    tag: {{ charts.spinnaker.halyard_version }}
  spinnakerVersion: {{ charts.spinnaker.version }}
  additionalProfileConfigMaps:
    data:
      front50-local.yml: |-
        spinnaker:
          s3:
            path-style-access: true
            versioning: false      
      gate-local.yml: |-
        server:
          tomcat:
            protocolHeader: X-Forwarded-Proto
            remoteIpHeader: X-Forwarded-For
            internalProxies: .*
            httpsServerPort: X-Forwarded-Port
  additionalSecrets:
    create: true
    data:
      github.token: {{ charts.spinnaker.github.token | base64_encode }} # Github API key (repo permission only)
  additionalConfigMaps:
    create: true
    data:
      config.src: |-
        DECK_URL="https://{{ charts.spinnaker.ingress_host }}.{{ public_domain }}" # Url to access your deck 
        GATE_URL="https://{{ charts.spinnaker.ingress_host }}-gate.{{ public_domain }}" # URL to access your gate
      
  additionalScripts:
    create: true
    data:
      00-configure_url.sh: |-
        source /opt/halyard/additionalConfigMaps/config.src
        
        $HAL_COMMAND config security ui edit --override-base-url "${DECK_URL}"
        $HAL_COMMAND config security api edit --override-base-url "${GATE_URL}"
      01-configure_github.sh: |-
        TOKEN_FILE=/opt/halyard/additionalSecrets/github.token
        ARTIFACT_ACCOUNT_NAME=github-artifact-account

        if $HAL_COMMAND config artifact github account get ${ARTIFACT_ACCOUNT_NAME}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config features edit --artifacts true
        $HAL_COMMAND config artifact github enable
        $HAL_COMMAND config artifact github account ${PROVIDER_COMMAND} ${ARTIFACT_ACCOUNT_NAME} --token-file ${TOKEN_FILE}
      
      {% if charts.get('keycloak', {'enabled': False}).enabled %}
      {%- set keycloak_url = 'https://' + charts.get('keycloak', {}).get('ingress_host') + '.' + pillar['public-domain'] -%}
      {%- set keycloak_password = salt['cmd.shell']("kubectl get secret --namespace keycloak keycloak-http -o jsonpath='{.data.password}' | base64 --decode; echo") -%}
      {%- set client_secret     = salt['cmd.shell']('/srv/kubernetes/manifests/spinnaker/kc-clientsecret-spinnaker.sh' + ' ' + 'keycloak' + ' ' + keycloak_password + ' ' + keycloak_url + ' ' + charts.spinnaker.oauth.keycloak.realm) -%}
      {%- set realm = charts.spinnaker.oauth.get('keycloak', {}).get('realm') -%}
      02-configure_oauth2.sh: |-
        source /opt/halyard/additionalConfigMaps/config.src
        
        $HAL_COMMAND config security authn oauth2 edit --access-token-uri "{{ keycloak_url }}/auth/realms/{{ realm }}/protocol/openid-connect/token"
        # $HAL_COMMAND config security authn oauth2 edit --client-authentication-scheme
        $HAL_COMMAND config security authn oauth2 edit --client-id "spinnaker"
        $HAL_COMMAND config security authn oauth2 edit --client-secret "{{ client_secret }}"
        # $HAL_COMMAND config security authn oauth2 edit --deployment
        $HAL_COMMAND config security authn oauth2 edit --pre-established-redirect-uri "${GATE_URL}/login"
        # $HAL_COMMAND config security authn oauth2 edit --pre-established-redirect-uri "${DECK_URL}/gate/login"
        $HAL_COMMAND config security authn oauth2 edit --provider other
        # $HAL_COMMAND config security authn oauth2 edit --scope
        $HAL_COMMAND config security authn oauth2 edit --user-authorization-uri "{{ keycloak_url }}/auth/realms/{{ realm }}/protocol/openid-connect/auth"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-email "email"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-first-name "firstName"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-last-name "lastName"
        $HAL_COMMAND config security authn oauth2 edit --user-info-mapping-username "username"
        # $HAL_COMMAND config security authn oauth2 edit --user-info-requirements  
        $HAL_COMMAND config security authn oauth2 edit --user-info-uri "{{ keycloak_url }}/auth/realms/{{ realm }}/protocol/openid-connect/userinfo"
        $HAL_COMMAND config security authn oauth2 enable
      {% endif %}
      {% if common.addons.get('kube_prometheus', {'enabled': False}).enabled %}
      03-configure_prometheus.sh: |-
        $HAL_COMMAND config metric-stores prometheus enable
      04-configure_canary.sh: |-
        # Configure kayenta microservice for Prometheus
        TOKEN_FILE=/opt/halyard/additionalSecrets/prometheus.token
        CANARY_ACCOUNT_NAME=prometheus-metrics-account

        if $HAL_COMMAND config canary prometheus account get ${CANARY_ACCOUNT_NAME}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config canary edit --default-metrics-store prometheus
        $HAL_COMMAND config canary prometheus account ${PROVIDER_COMMAND} ${CANARY_ACCOUNT_NAME} --base-url https://prometheus-k8s.monitoring:9090
        $HAL_COMMAND config canary enable
      {% endif %}
      {% if charts.get('concourse', {'enabled': False}).enabled %}
      05-configure_concouse.sh: |-
        # Configure Kubernetes cluster internal Concourse instance
        USERNAME={{ charts.spinnaker.concourse.username }}
        PASSWORD={{ charts.spinnaker.concourse.password }}
        INSTANCE=internal
        URL='http://concourse-web.concourse:8080'

        if $HAL_COMMAND config ci concourse master get ${INSTANCE}; then
          PROVIDER_COMMAND='edit'
        else
          PROVIDER_COMMAND='add'
        fi

        $HAL_COMMAND config ci concourse master ${PROVIDER_COMMAND} ${INSTANCE} --url ${URL} --username ${USERNAME} --password ${PASSWORD}
        $HAL_COMMAND config ci concourse enable
      {% endif %}

minio:
  {%- if master.storage.get('rook_minio', {'enabled': False}).enabled %}
  enabled: false

s3:
  enabled: true
  bucket: spinnaker
  endpoint: http://spinnaker-minio:9000
  accessKey: {{ charts.spinnaker.s3.accesskey }}
  secretKey: {{ charts.spinnaker.s3.secretkey }}        
  {%- else -%}
  enabled: true
  persistence:
    enabled: true
  {%- endif %}


dockerRegistries:
- name: dockerhub
  address: index.docker.io
  repositories:
   - library/alpine
   - library/ubuntu
   - library/centos
   - library/nginx
   - fjudith/spinnaker-sample-app
   - fjudith/draw.io
{% if charts.get('harbor', {'enabled': False}).enabled %}
- name: harbor
  address: {{ charts.harbor.core_ingress_host }}.{{ public_domain }}
  username: admin
  password: {{ charts.harbor.admin_password }}
{% endif %}

spinnakerFeatureFlags:
  - artifacts

redis:
  enabled: true
  cluster:
    enabled: true
  master:
    persistence:
      enabled: true
    disableCommands: []
  slave:
    disableCommands: []
  sentinel:
    enabled: false