# -*- coding: utf-8 -*-
# vim: ft=jinja

{#- Get the `tplroot` from `tpldir` #}
{% from tpldir ~ "/map.jinja" import argo_cd with context %}
{%- set public_domain = pillar['public-domain'] -%}
{% from "kubernetes/map.jinja" import storage with context %}
{% from "kubernetes/map.jinja" import charts with context %}

global:
  images:
    tag: v{{ argo_cd.version }}

## Controller
controller:
  images:
    tag: v{{ argo_cd.version }}
  ## Server metrics controller configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

## Dex
dex:
  enabled: true
  ## Server metrics dex configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

## Redis
redis:
  enabled: false
# This key configures Redis-HA subchart and when enabled (redis-ha.enabled=true)
# the custom redis deployment is omitted
redis-ha:
  enabled: true
  # Check the redis-ha chart for more properties
  exporter:
    enabled: true
  haproxy:
    enabled: true
    metrics:
      enabled: true

## Server
server:
  image:
    tag: v{{ argo_cd.version }}
  ## Server metrics service configuration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  ## ArgoCD config
  ## reference https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  {%- if charts.get('keycloak', {'enabled': False}).enabled %}
  {%- set keycloak_url = 'https://' + charts.get('keycloak', {}).get('ingress_host') + '.' + pillar['public-domain'] %}
  {%- set realm = argo_cd.oauth.get('keycloak', {}).get('realm') %}
  config:
    # Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: {{ "https://" ~ argo_cd.ingress_host ~ "." ~ public_domain }}
    # Argo CD instance label key
    application.instanceLabelKey: argocd.argoproj.io/instance
    oidc.config: |
      name: Keycloak
      issuer: {{ keycloak_url ~ "/auth/realms/" ~ realm }}
      clientID: argo-cd
      clientSecret: $oidc.keycloak.clientSecret
      requestedScopes: ["openid", "profile", "email", "groups"]
  rbacConfig:
    policy.csv: |
      g, argo-cd-admins, role:admin
  {%- endif %}
  ## Enable Admin ClusterRole resources.
  ## Enable if you would like to grant rights to ArgoCD to deploy to the local Kubernetes cluster.
  clusterAdminAccess:
    enabled: true

{%- if charts.get('keycloak', {'enabled': False}).enabled %}
{%- set keycloak_password = charts.get('keycloak', {}).get('password') %}
{%- set client_secret     = salt['cmd.shell']('/srv/kubernetes/manifests/argo-cd/kc-clientsecret-argo-cd.sh' + ' ' + 'keycloak' + ' ' + keycloak_password + ' ' + keycloak_url + ' ' + argo_cd.oauth.keycloak.realm) %}
## Argo Configs
configs:
  secret:
    createSecret: true
    # Custom secrets. Useful for injecting SSO secrets into environment variables.
    # Ref: https://argoproj.github.io/argo-cd/operator-manual/sso/
    # Note that all values must be non-empty.
    extra:
      oidc.keycloak.clientSecret: {{ client_secret }}
      # LDAP_PASSWORD: "mypassword"
{%- endif %}

openshift:
  enabled: false