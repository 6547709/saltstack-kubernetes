{%- from "kubernetes/map.jinja" import common with context -%}
{%- from "kubernetes/map.jinja" import etcd with context -%}
{%- from "kubernetes/map.jinja" import master with context -%}

{%- set hostname = salt['grains.get']('fqdn') -%}
{%- set vars     = {'current_ip': "127.0.0.1"} -%}

{%- for member in master.members -%}
  {%- if member.name == hostname -%}
	{%- if vars.update({'current_ip': member.host}) -%}{%- endif -%}
  {%- endif -%}
{%- endfor -%}

apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  hostNetwork: true
  containers:
  - name: kube-apiserver
    image: {{ common.image }}
    command:
    - /hyperkube
    - apiserver
    - --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
    - --advertise-address={{ vars.current_ip }}
    - --allow-privileged=true
    - --anonymous-auth=false
    - --apiserver-count={{ master.members|selectattr('host')|list|length }}
    - --audit-log-maxage=30
    - --audit-log-maxbackup=3
    - --audit-log-maxsize=100
    - --audit-log-path=/var/log/kube-audit/audit.log
    - --audit-policy-file=/etc/kubernetes/audit-policy.yaml
    - --authorization-mode=Node,RBAC
    - --bind-address=0.0.0.0
    - --client-ca-file=/etc/kubernetes/ssl/ca.pem
    - --enable-bootstrap-token-auth
    - --enable-swagger-ui=true
    - --storage-backend=etcd3
    - --etcd-cafile=/etc/kubernetes/ssl/ca.pem
    - --etcd-certfile=/etc/kubernetes/ssl/apiserver.pem
    - --etcd-keyfile=/etc/kubernetes/ssl/apiserver-key.pem
    - --etcd-servers={% for member in etcd.members %}https://{{ member.host }}:2379{% if not loop.last %},{% endif %}{% endfor %}
    - --event-ttl=1h
    - --experimental-encryption-provider-config=/etc/kubernetes/encryption-config.yaml
    - --insecure-bind-address=127.0.0.1
    # https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet-authentication
    - --kubelet-certificate-authority=/etc/kubernetes/ssl/ca.pem
    - --kubelet-client-certificate=/etc/kubernetes/ssl/apiserver.pem
    - --kubelet-client-key=/etc/kubernetes/ssl/apiserver-key.pem
    - --kubelet-https=true
    - --runtime-config=api/all
    # - --runtime-config=extensions/v1beta1/networkpolicies=true
    - --service-account-key-file=/etc/kubernetes/ssl/service-account.pem
    - --service-cluster-ip-range={{ master.service_addresses }}
    - --service-node-port-range=30000-50000
    - --storage-media-type=application/json
    - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
    - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
    - --tls-ca-file=/etc/kubernetes/ssl/ca.pem
    - --token-auth-file=/etc/kubernetes/token.csv
    - --v=2
    livenessProbe:
      httpGet:
        host: 127.0.0.1
        port: 8080
        path: /healthz
      initialDelaySeconds: 15
      timeoutSeconds: 15
    ports:
    - containerPort: 6443
      hostPort: 6443
      name: https
    - containerPort: 7080
      hostPort: 7080
    - containerPort: 8080
      hostPort: 8080
      name: local
    volumeMounts:
    - mountPath: /etc/kubernetes/ssl
      name: ssl-certs-kubernetes
      readOnly: true
    - mountPath: /etc/ssl/certs
      name: ssl-certs-host
      readOnly: true
    - mountPath: /etc/kubernetes
      name: config-kubernetes
      readOnly: true
  volumes:
  - hostPath:
      path: /etc/kubernetes
    name: config-kubernetes
  - hostPath:
      path: /etc/kubernetes/ssl
    name: ssl-certs-kubernetes
  - hostPath:
      path: /usr/share/ca-certificates
    name: ssl-certs-host